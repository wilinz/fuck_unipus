use aes::Aes128;
use aes::cipher::generic_array::GenericArray;
use base64::Engine;
use base64::engine::general_purpose;
use block_padding::{NoPadding, Pkcs7};
use ecb::cipher::{BlockDecryptMut, KeyInit};
use hex::{self};
use serde_json::Value;

type Aes128EcbEnc = ecb::Encryptor<Aes128>;
type Aes128EcbDec = ecb::Decryptor<Aes128>;

fn pad_key(key: &str) -> Vec<u8> {
    let mut key_bytes = key.as_bytes().to_vec();
    while key_bytes.len() % 16 != 0 {
        key_bytes.push(0);
    }
    key_bytes
}

fn aes_ecb_decrypt_from_hex(
    ciphertext_hex: &str,
    key: &str,
) -> Result<String, Box<dyn std::error::Error>> {
    // Step 1: hex → bytes → base64 encode → base64 decode (match Python's weird flow)
    let bytes = hex::decode(ciphertext_hex)?;
    // Step 2: pad key
    let key_padded = pad_key(key);
    let key_padded = GenericArray::clone_from_slice(&key_padded);

    let mut decrypted_bytes = vec![0; bytes.len()];
    let len = Aes128EcbDec::new(&key_padded)
        .decrypt_padded_b2b_mut::<NoPadding>(&bytes, &mut decrypted_bytes)
        .unwrap()
        .len();
    decrypted_bytes.truncate(len);

    // Step 4: trim '\0'
    let decrypted = String::from_utf8(decrypted_bytes)?
        .trim_end_matches('\0')
        .to_string();
    Ok(decrypted)
}

pub fn decrypt_unipus_content(content: &str, k: &str) -> Result<String, Box<dyn std::error::Error>> {
    let key = format!("1a2b3c4d{}", k);
    let index = content.find(".");
    if index.is_none() {
        return Err("content is invalid format".into());
    }
    let cipher_hex = &content[index.unwrap() + 1..];
    let decrypted_str = aes_ecb_decrypt_from_hex(cipher_hex, &key)?;
    Ok(decrypted_str)
}

#[cfg(test)] // 只在测试时编译
mod tests {
    use super::*; // 引入外部作用域中的代码

    fn decrypt_many(inputs: &[&str]) -> Result<Vec<Value>, Box<dyn std::error::Error>> {
        let mut results = Vec::new();

        for input in inputs {
            let parsed: Value = serde_json::from_str(input)?;
            let content = parsed["content"]
                .as_str()
                .ok_or("Missing content")?;
            let k = parsed["k"]
                .as_str()
                .ok_or("Missing key 'k'")?;

            let decrypted = decrypt_unipus_content(content, k)?;
            let decrypted: Value = serde_json::from_str(&decrypted).unwrap();
            results.push(decrypted);
        }

        Ok(results)
    }

    #[test]
    fn test_decrypt_many() {
        let inputs = vec![
            r#"{
  "code": 0,
  "content": "unipus.539d972cab2e9b1c122bb99c163daa4a2ee89f66c1306590660c7dcc14ffe812fbab4496d08fa61b6646e36bfff10724bcd60ef0f754a61e984c0c003127b4bb80bef35760ac63ed448dddd727abbf93446e26ed0fe3d2442b56375d5c97a916b29b82e35b1b712231170a1286f5e6a5929f5762c1398de1275aeaf1e9c92dee08614b7452110df58e75968f8c0cdf57cb0c40cbec0260f6bafd8664d14af117439c315e2e294182d1282973f4f3fdad0dbbb8e08f05372efdf538e44e508ff0f25492c691d249177e5831204430d856923535081f70f312301c3049cb7b4511138ab89ee753adb58919c000972e4aa9cd60f1557e6eb3e22a193d95851ba039c1c49ba0fb1a7e1a15e8c134597a78e5725545d6b8ee011292ed4022f96e69b724c950f3aee179e87ba48bee77c3c32ab39368896c823eea10ed72be1f158ea4d87b1989fe1d70e7a887f57424698feb8a1acb8b1fa568d220f1507df835422e4cd847a100ebcb3e336b79f86ae669c36d41d778ae7d525ec2057f5badb1f69e2c222384f08cd488f7f7ad792ef66d5f99d96e336b57c3e10111ae87019bd4ace6c7bd5368ef5f99a3f049c7a5401c86c6aca764cb8c470791132c4f7422406be35c1c6ddd03fb2d383d4a9971748b7d49fbccb0741eee94f7be89c7420bc63962f5464491cdaac5f0c6063a4e4360183e1e4b89b3f7bb3ac803a36fe3bf812c0bda7163e3aa6e34741bad00cbc4660d835013ec3d4ced1858bd05b6656b205a2f543c2ade61709f9e798b7ddcf655d630a9e211050551daabe9e1c604bd6de1e795a1b14e1b100ea5711a173f7a19e284503b766fb2b26efff8904797bee4e49ec723c09a2420d3a17f498a9966ef9905fb9a15ab27d44d77d6c08166cf908527ed84ed17c69c69b70cecadac6f0d9034c6dcf9d9b79c7a251718318bb31e3c239ebe24ff85a75132edf9649257181961847e73b0fe761efb4c7291ea907d6d63440578221462dfbb1c6b15d2b510390bd42f55680de3133828e5341abcdd98be667c931aca45efeb1c99e4e44f2dc273662a966abccb0c9b30a492b3bafaf64da3079d3f345498d365e2a2aad017a927828191a3141931677538bbbc9cf475d6cc126c417c3fc8125e0e6b7a078fe0276e6d6bdfbe34144f12c6d14fe8c8a3dcbbe2a592b7a00c249400385031cd276eade1ea00bc7c08cc07679577fa9d89830eba85cbd86700c2878fddd9c26ef69747cc6058e0a40cb0f81f739e9c4dd8ebe5b2d9b73d03fd42da594e0cbb87fce51a3d919b10e0bace5307b69076a24a68307f09f9138674fa4131612700028caecb086934bd5c1be474950e91f99e627131c1ea22e357e37ca7cbe5ae83ab7c1836d7697384586cd90f97a73a6fd13687e83118160aa5356bf27dafd68e23626e38d917df07fce265848a47f94a1284dd2e37ccfc4d1c89077c8c97d97c310a722544cbdd57784cc0f26746fe0977cb1fe9e975f50b08b7752f442cb8cd26fca83062cd207941a25bf3d5cf38eef722919309f6f0b8b4b199c4185a6d15366166b1748d7c54ca6a4e0e5ff196d922547ff347dc75d77cc48a81571ba99f3d5c7daf09c7921fdd96084756cd902e0bc445058689df39c04fe66775b14d96c07e45202793b04b1ae987e0ecefe014eeb316200f18b848f7fde88100b577651f3396ff44cdfe286d7a9b4b71ea1727a4bab29b82e35b1b712231170a1286f5e6a5929f5762c1398de1275aeaf1e9c92deeb5bcf607cc1a0438f06308d0ac3004dde2628379d2c662e7fcab12c83f4a65987b9e22aa9417efca17e61b4cc34c523ae21df657241aca945a4212e529e08fa92292951f5dfb67d18f3f86237f6a0139138ab89ee753adb58919c000972e4aa9cd60f1557e6eb3e22a193d95851ba039c1c49ba0fb1a7e1a15e8c134597a78e5725545d6b8ee011292ed4022f96e69b7fd02234e42994dac60e2bff047c58b25b39368896c823eea10ed72be1f158ea49577e41be4e46fc369d41ad0bf5b2665a1b9fccd53a5a492fd05fc80e527c660d884c16254cbfc1243bdd4641c12658b2bb70ea1727aec93b23e5fca1bb8c46b035179244361d9076b4e12a9732fe93b2c505dee6915a04feff924b93e62cfbaa2ff6649bd2b7afc8019706f69d40f45ce559af899b183993c3c390717264446140fb43fe5c69dd7aaf672449593386cec208fc172917bab0440a65ba8b8859b3cb84f6e217eaf1c853ef52034fdf124801333b4adb98c149a60ce784be577b0fb912ef1a4f1d9e17663c5ecbacba2b89999b0183cd4d855a17fc462e3750db55d129cec923201b9743935ec3649fedcaf78b9b9ee8a8cd0e5eccee96ffadf0668eace661ea1798ab639ea37ad295d6d524d70088ebf9f65f2d4ff5e7bf3c5dd2793f41f6bcc428d6d477b8c45cef19bc631fc7fb770dc0fe560d0b00e7664df360e01c398000772a936875230a62f813992d5cb497ccb4fb18633c6c674bdf43a0f37a91b6976f1edd882b2fff3b47343ae9a1ed520fe6b838ef1dbc5214217ca08d12888f4f68d6242b16bf5296611cc3219aeeb2e979b337b892d047a1fd0ea7d77f06c1d25cf75d2c2991fe7afbe50d7472e668706805f6f5f25b71b626f0664df89954db74faaf1731ecb548b6e9ec723c09a2420d3a17f498a9966ef9905fb9a15ab27d44d77d6c08166cf908527ed84ed17c69c69b70cecadac6f0d904bae13af243f00ef9b56bdf5fa899803c8a9533886023a2678798c48ff2d28fc26248c92033da173561325aa6b160016a3343587c66ce5727dd6b30cca23c035e0895244b913d23cd18982d5b34cfe0c8f829e43e809210807d7f20a490b9b41cef23eae1fb82a03495c4a10f9fb6a3c8ecd3e8f6fe7356d10a63d84fd2bc8771e63325cd5903a59901947dffc2bfdf76df51404dfeb27a4a8947bd0eb8acfbef723e708ddbd337e97100ae1ea5f60b147c9d3bf39f3be8efaab92180c34af6e566f9db54820426c58b239cf11f4a4897f892f0594c769581f554098b00911f9621b5a9519b32b85f2a64a48fadb5bb83751576d232fc2dc2564ae092fa74255253ca3600d42d94690e0ed75ae3f8bbe09a095878aab5fbee91049b16f69b6ff9815a3704120b5881eb25e3367f39d78490a09b3d441935bac452961a7c20bd0746606bdc178a8037e69732a2cd1bcd71dd3818dd2ead4b8a42ffd145e3b6167c5eecc90c7288e2f5386be8835a3d7fff46d9af4bfeb1dae628c7359d7c15bf62d1bedd768b57bf065bbedaa5ff2741c0fa80f725d9860095f491cd439f02271c2f7ffb5580318dabef873111040dce43deafa219deddebf4df3e580dd8e589b1801e91569dcf80b8dbd9caa8a230cdeba9c92481849897a715583c5f1738278ea18fc546d167cc3a34a557035e2ce7ffc23f78d7f8475f643e659d62ad1259cc47009e6b35be6ce91840b6ee38e604befa4e2ce4ec7b9d9392f28e805e7780734a928b3518f2a40db2fc37c338ca0d5",
  "version": 0,
  "publish_version": 74099,
  "k": "20250414",
  "schema": "v1"
}"#,
            r#"{
  "code": 0,
  "content": "unipus.d75f098c7037fc96122ad05c82d62e97171a0968d7a6d23403edd16d0c2061fc185929db4be6c9332f3092c5642b0ac39267e72ad4611fc14007d0528d483593c56cd21936818ab7f984245f0d8a200d61611ae7888cec419174ddb74bc48291b5bff5a376a0d3baa050d97e779a5bdb87fb5871a229f6f7e9fe99ae32a5a624b26cb2de20d0b2efdffe525fb75575b2647668ac6f1bbd2246d8a77c6bc62fb7f56bee92093ce6657feb149cf28d0a4738aac3c90c1a91459601bd26a425d6bdda26240dee6611676527789f3f3a14a3cb977c79d37d94d66a0f61ea2c7c3eff4ad8343204ada823e5ecfb00c9b3895164a13b09390152a23032dda213e716797dc11521959340cfc911fd248f236fc8bb716cbcd96848e5f209ef0e6340101076507cc4746758b9cc0dac36ba06e460cb33a1b19a4712e4f69eedf241ac111de1ac0b47301d92c1ab3dc533bb19ad35f361bb0adeb618dbed33a1cc91db94af7cc86cc1c65dc3436371323dc24becf4829c3cb783ea225ba50b813249afab3815f6847832e894c413d3ffd7a56ed9dd0b811c3422ab8976df45613102058ffbdc2ff06c512d33fb8e85a5ee28ce5e90e8be66d5cafaf4e59e6a41fa24a67b8c3037770ad7aadf56e4663e019db0e46413cf2edebef7afabbd2b20bd7fd32287aa4eb0c8d445271464a2a9f31064a3730aca4f82c749ac856de643d2bc9aa38214ee3f558452e95d42b865dea13cb88da86589fc7340a3ac23410f48a4a363901a439f6860daa62f4f808402c85fa69d443405815da261a6ecdb82daf9fa12dd60e15f7a3c7bdded78e69f6f479e22b7eff99977cc1956e8ec991267f190d23ad247acc108a2d6903c16303ab2ed1c71872eeaf7bde611db3f534ac011e6cb107bbab3d475922cb46e662472de870fd1369e0183b2eaa5f0328a4c6eb1fd728d07641c9316d2b01fb917386a722c08b7bd1fdb289df20ce7b843a15306c8d79141965dd8571225e4028cd7d9a8f44e778f6299e7d75d7f24fbfd2cdf173472f00dbbb7f0156e27459e9c2c66d7e9e8f0b6617f7e6f02310989fe7d40a56d70d5996ba0b5258dabb150c68dea40f44ea6de15ce11d8bf5c05fa46d48d531e9d03953392a82f059a48810dd680e93f7bfd23c94a34d4517d5bb094edc48f30adbe3fb4b99490a49d8bd5f5244bb944d45653b2336b9a7fb7b15b3980686cd95a2b06c9465b80dab9fa3e12b7d8a924dfb439a7b5c2c02e6e098ab109a79cadebe539a7b5c2c02e6e098ab109a79cadebe51a3d404e9517bd8ececc1ea53d06d07cf30bc1a8104c85c31e18c8a65ed356509ec723c09a2420d3a17f498a9966ef9905fb9a15ab27d44d77d6c08166cf908527ed84ed17c69c69b70cecadac6f0d904bae13af243f00ef9b56bdf5fa8998034947061fb20e39ec8a21c06f652912a347bd1bd1043ab843e92b1ac78be4b981022f483b67fe8f907546c5d35774bf8ca8d0ee80683075918d0dce2faa20b4a66e0fe843cd0123efd7649e16dcdac8b30ecc3c84a61fc1fb6f7e3935697c4f350e1e98b601f68846b8c90cd4f7f4d224c54303612408896e26bd710f8b8f7f192b2cdc248e23ab0052fa1d99ea3126c15eae6aabf0e231d3bda37afa0b905362e784eafbe2c7e3f3962a46e4c26012adeac0917dd9a0639b7ac2de2976282ebe65e9f39e8e352fab5dd86a9aec85c7e04dc5da89ca3f81149cea95483be8ed0206c9465b80dab9fa3e12b7d8a924dfb439a7b5c2c02e6e098ab109a79cadebe51ca03f4520193dd11806dea0f34d7e48300225b378c7af5458e3be826d4ac033e5a1397c73c50a22f6d5e949253300dc4bae13af243f00ef9b56bdf5fa899803fd1527f7b1012a04acc5247e802ae02d7c1d5da01482a80ab9c42efae8feb43c6a6b2cfc371f5958b574c89f1c3c17de9f5baf88513abc398ca9c7b3bd0b2222c723dfe5a396d45b584d1ec72b4c97d6a2dc7b83e3122720fa2c514ab651b9467d37d29dbcfa233186ea2708caf6e5b0f705474c48599a954408e198ee5f6d3d24df014ddd1e30d350a9ea72650eaecad5a3c0348f45061de088f393bef7ac16b933c8814cb2f682d12737403a56841ec3d5c8d86eeecdf7d287311781894b9fa6771f524fa95ed648d68d540ac219b110eac05a88457b7aa36e7f57bc52272f7e12b4a56e10fa63a8c35ae1a54d29323b71deb69f07dc11d28aec66a1a853c603883a5b5eea0c1119c9e9ad7cfab01f148f6f15bdf95478315c57afabcbf719e6e4c59fd3e3b4be7a3d15856b3367bd3a1a4562fda17615f572bc7173fae7d6641a556d8326c4c49ff366063b505931cb950e90bdf8e26a43fa27815614a0e42bd5b6a17bb7cfffa3cdae4d56fa4c456f1da0dbb9d25e3708772513a2952c8452c29a2807d34dfef715730810f25aac7d6d5f95c6f7873bcf486907d6305748a3657ae1ab9331de26e26048441e6e42be9628a241e3fdca9a4b937df60bfdb9d344ebb772a198ce4b7f837ed733519557a02e39cb96f018f388c88eebf589ead9ddb648f4563c39ddc159370505ada6d89e897869889c41ceb4b4f98f67a64d15b97a58df6bc130fa23ca5dfa330c66baa927d119a611a94a0c2550776389b253a3264e2d89d29377f22ce4b909f61b1f376b2182b8f86eb0b9886074862420b4c3280e2c3c2aed1112f18513161dafd4f6ab2ee1a90efce66d29e992d38d2fdc43563309cf06bfa091c729f9498f08c6b245627fe02bd51007be56249d59ee024b1c48e427ae77266caadb66665e782da3fe5900b74a4ce8bc1350b6368ba52afb92dec03d0bd6377377b0474f92cfc5ff0340b385fd254cfd52efe67282fccab8966c1f010c9b3395e0db11caf1ed149c986042d57ac3ba1272f9505b9ae3",
  "version": 0,
  "publish_version": 74099,
  "k": "20250414",
  "schema": "v1"
}"#,
            r#"{
  "code": 0,
  "content": "unipus.dfc160ee6ce5bfb56ce8f57d23fe096303d62b8e6296c0dae24b7c2dd70560c2a49e8deff5a839c10f2d10875d3942f9f66c7c7ce9ed6bfca0ff1a5e2666b885dddddcab75934f3d0e9083a2f371692d10eb8c4f729171626a5cd9d126f87daa567d264ced1f7fdca6373b30280cdb13d4142f73829d72c1ce4255b13f7509683ad48100ac8313423e5a91c427d7b54dc13f7271258e28891f9ca150e5a8dc9960bf25a2a8a9f59baa2a300d45195ad0c4bfe93cf3398db7a382ac1e33491abaf0051c060400b6519ce07cf7d65ca0e44543bfe49fb1f00a77c8b67c03d431753d20f3a62062cb2f16c115e0ad1279389ff5ae639fec476c75f6b6bb6f48984a5e7f2abbcfe536b1e7cdd1c7d6a30ea36ef86800a2aa7e935fbf57f071171ccfdafbfe46cd19a7ef0f5159acdf2351467a5aa8c4fbee265c83a4e43310e522d855754d7a44f77e77ddf77e0e09d163e6558a96ba3519dbc45b91ea836ec21c5b9b897b13d9c30d71cee6db13984a51ecb70807dfd5fe4a4a613431ce8b1263bf4a0842818be3ab802359a316d30a430e0ba93c64fed82d01e4a76869df93c24d370815bc36393300ad4e8ff1e7a19b6f57b5be9d280c8801821e2f78ed5f68d9323b27566d1c1f249b63958e400d19ac96c49a09c06b7f13772929fd05f021924b968a4bd35a6f10cf874c63310e307a21367d81a848584afdb524655f5ed2663019ec174c24d66f0756b8442362d3b1742e92cc0ce6c44437e463e129d90ed7ec646a86294b732586deca27f2b03d5a8671a88b95aa0546546033f3b94fd72c5945159cc3244de117652f453065368497dd67cc9e24ad4b12da0abb4e615b4cc2df680f659ec199c4bffea390d8f8530e8535054789a249c4ea61ea277dbc12",
  "version": 0,
  "publish_version": 74099,
  "k": "20250414",
  "schema": "v1"
}"#,
        ];

        let results = decrypt_many(&inputs).expect("Batch decryption failed");
        assert_eq!(results.len(), inputs.len());
        for (i, res) in results.iter().enumerate() {
            println!("Decrypted #{}: {}", i + 1, res);
            assert!(res.is_object(), "Expected JSON object");
        }
    }

}
